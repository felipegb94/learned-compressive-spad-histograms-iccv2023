# The parameter counter function
import numpy as np 
import torch
import torch.nn as nn

def ParamCounter(model):
    params = filter(lambda p: p.requires_grad, model.parameters())

    FE = nn.Sequential(*list(model.children())[:1])
    C1 = nn.Sequential(*list(model.children())[1:2])
    NLB = nn.Sequential(*list(model.children())[2:3])
    ds1 = nn.Sequential(*list(model.children())[3:4])
    ds2 = nn.Sequential(*list(model.children())[4:5])
    ds3 = nn.Sequential(*list(model.children())[5:6])
    ds4 = nn.Sequential(*list(model.children())[6:7])

    b0 = nn.Sequential(*list(model.children())[7:8])
    b1 = nn.Sequential(*list(model.children())[8:9])
    b2 = nn.Sequential(*list(model.children())[9:10])
    b3 = nn.Sequential(*list(model.children())[10:11])
    b4 = nn.Sequential(*list(model.children())[11:12])
    b5 = nn.Sequential(*list(model.children())[12:13])
    b6 = nn.Sequential(*list(model.children())[13:14])
    b7 = nn.Sequential(*list(model.children())[14:15])
    b8 = nn.Sequential(*list(model.children())[15:16])
    b9 = nn.Sequential(*list(model.children())[16:17])

    conr = nn.Sequential(*list(model.children())[17:18])
    C2 = nn.Sequential(*list(model.children())[18:19])

    total_num = sum(p.numel() for p in FE.parameters())
    print(FE)
    print("Params:{}".format(total_num))
    total_num = sum(p.numel() for p in C1.parameters())
    print(C1)
    print("Params:{}".format(total_num))
    total_num = sum(p.numel() for p in NLB.parameters())
    print(NLB)
    print("Params:{}".format(total_num))
    total_num = sum(p.numel() for p in ds1.parameters())
    print(ds1)
    print("Params:{}".format(total_num))
    total_num = sum(p.numel() for p in ds2.parameters())
    print(ds2)
    print("Params:{}".format(total_num))
    total_num = sum(p.numel() for p in ds3.parameters())
    print(ds3)
    print("Params:{}".format(total_num))
    total_num = sum(p.numel() for p in ds4.parameters())
    print(ds4)
    print("Params:{}".format(total_num))
    total_num = sum(p.numel() for p in b0.parameters())
    print(b0)
    print("Params:{}".format(total_num))
    total_num = sum(p.numel() for p in b1.parameters())
    print(b1)
    print("Params:{}".format(total_num))
    total_num = sum(p.numel() for p in b2.parameters())
    print(b2)
    print("Params:{}".format(total_num))
    total_num = sum(p.numel() for p in b3.parameters())
    print(b3)
    print("Params:{}".format(total_num))
    total_num = sum(p.numel() for p in b4.parameters())
    print(b4)
    print("Params:{}".format(total_num))
    total_num = sum(p.numel() for p in b5.parameters())
    print(b5)
    print("Params:{}".format(total_num))
    total_num = sum(p.numel() for p in b6.parameters())
    print(b6)
    print("Params:{}".format(total_num))
    total_num = sum(p.numel() for p in b7.parameters())
    print(b7)
    print("Params:{}".format(total_num))
    total_num = sum(p.numel() for p in b8.parameters())
    print(b8)
    print("Params:{}".format(total_num))
    total_num = sum(p.numel() for p in b9.parameters())
    print(b9)
    print("Params:{}".format(total_num))
    total_num = sum(p.numel() for p in conr.parameters())
    print(conr)
    print("Params:{}".format(total_num))
    total_num = sum(p.numel() for p in C2.parameters())
    print(C2)
    print("Params:{}".format(total_num))

    total_num = sum(p.numel() for p in model.parameters())
    print("All Params:{}".format(total_num))